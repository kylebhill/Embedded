This lab I wrote a code to play music tones based on which key on the keypad was pressed. We did this by generating and outputting a waveform using a timer which matched the frequency of this music note. I did this using a Fast PWM timer which I set up so that it would count to OCR2A rather than 0xFF and with a prescale value of 256. This meant that OCR2A controlled the frequency and OCR2B controlled the duty cycle. Since the duty cycle was always 50% OCR2B would always equal OCR2A/2. But to set the frequency I used the same keypad scanning function I used in lab 3 but this time instead of having an char array which had the values I would transmit this time I had a uint8_t array which contained my desired OCR2A values. So, whenever I pressed a key, I change my OCR2A value and OCR2B value so that the waveform would have the desired frequency.
The registers I have been referencing refer to timer 2 rather than timer 0 because the Fast PWM automatically generates a output waveform on a prespecified pin. But many pins are already taken up by the keypad. To make use of this while keeping my scanning function unchanged I used timer 2 and read the output from the OC2B which is outputted at pin D3. I also mentioned using prescale value of 256, this value was chosen because to have a frequency of 440Hz on prescale 128 OCR2A would have to equal about 288 which is too high. Thus 256 was the smallest prescale value which covered every required frequency.
